{"version":3,"sources":["Message.js","firebase.js","App.js","index.js"],"names":["Message","forwardRef","ref","username","message","isUser","className","Card","CardContent","Typography","color","variant","component","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","auth","storage","useStyles","makeStyles","theme","button","margin","spacing","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","role","aria-label","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAwBeA,EAlBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,QAChCC,EAASF,IAAaC,EAAQD,SAGpC,OACE,qBAAKD,IAAKA,EAAKI,UAAS,kBAAaD,GAAU,gBAAvB,KAAxB,SACE,cAACE,EAAA,EAAD,CAAMD,UAAWD,EAAS,oBAAsB,qBAAhD,SACE,cAACG,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAYC,MAAM,QAAQC,QAAQ,KAAKC,UAAU,KAAjD,WAEIP,GAAD,UAAcD,EAAQD,UAAY,eAAlC,MAAsDC,EAAQA,oB,QCdvES,EAAcC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,cACnBC,MAAO,2CACPC,cAAe,iBAIbC,EAAKX,EAAYY,Y,GACZZ,EAAYa,OACTb,EAAYc,U,eCLlBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNC,OAAQF,EAAMG,QAAQ,QAwFXC,MApFf,WACkBN,IAAhB,IADa,EAGaO,mBAAS,IAHtB,mBAGNC,EAHM,KAGCC,EAHD,OAImBF,mBAAS,IAJ5B,mBAING,EAJM,KAIIC,EAJJ,OAKmBJ,mBAAS,IAL5B,mBAKNhC,EALM,KAKIqC,EALJ,KAsCb,OA/BAC,qBAAU,WAORjB,EAAGkB,WAAW,YACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAK7C,QAAS4C,EAAIE,iBAEnE,IAGFT,qBAAU,WACRD,EAAYW,OAAO,0BACnB,IAeA,sBAAK7C,UAAU,MAAf,UACE,qBAAK8C,IAAI,kGACT,kDAAoB,sBAAMC,KAAK,MAAMC,aAAY,SAA7B,6BAGpB,sBAAMhD,UAAU,YAAhB,SACE,eAACiD,EAAA,EAAD,CAAajD,UAAU,mBAAvB,UAEI,cAACkD,EAAA,EAAD,CACElD,UAAU,aACVmD,YAAY,qBACZC,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAWvB,EAASuB,EAAMC,OAAOH,UAI7C,cAACI,EAAA,EAAD,CAAYxD,UAAU,kBAAkByD,UAAW3B,EACjD4B,QA9BQ,SAACJ,GACnBA,EAAMK,iBACNzC,EAAGkB,WAAW,YAAYwB,IAAI,CAC5B9D,QAASgC,EACTjC,SAAWA,EACXgE,UAAYrD,IAASW,UAAU2C,WAAWC,oBAG5ChC,EAAS,KAsBuBiC,KAAK,SAAS5D,MAAM,UAAUC,QAAQ,YAD9D,SAEI,cAAC,IAAD,WAiBV,cAAC,IAAD,UACC2B,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAG7C,EAAL,EAAKA,QAAL,OACZ,cAAC,EAAD,CAAkBD,SAAUA,EAAUC,QAASA,GAAjC6C,YCxFtBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9a1211f6.chunk.js","sourcesContent":["import React, { forwardRef } from \"react\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Card from \"@material-ui/core/Card\";\nimport \"./Message.css\";\n\nconst Message = forwardRef(({ username, message }, ref) => {\n  const isUser = username === message.username;\n// BEM convention component__element here message__userCard\n//forwardRef will keep track for messages (for animation). It is a higher order function\n  return (\n    <div ref={ref} className={`message ${isUser && \"message__user\"} `}>\n      <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n        <CardContent>\n          <Typography color=\"white\" variant=\"h5\" component=\"h2\">\n            {/* If we use it dont show our name just show guest names */}\n            {!isUser && `${message.username || 'Unknown User'}: `}{message.message}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n})\n\nexport default Message;\n","import firebase from \"firebase\";\n\nvar firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyB43bX3JrFLX4ZwhVTJpCObVBUQnTC_QvQ\",\n  authDomain: \"store-31aab.firebaseapp.com\",\n  databaseURL: \"https://store-31aab.firebaseio.com\",\n  projectId: \"store-31aab\",\n  storageBucket: \"store-31aab.appspot.com\",\n  messagingSenderId: \"59831587589\",\n  appId: \"1:59831587589:web:b09584da1e926dfad61d6c\",\n  measurementId: \"G-MSRMS1RNGT\"\n\n});\n\nvar db = firebaseApp.firestore();\nvar auth=firebaseApp.auth();\nvar storage=firebaseApp.storage()\n\n\nexport { db ,auth,storage};\n","import React, { useState , useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Message from \"./Message\";\nimport { db} from \"./firebase\";\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport { IconButton } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('')\n\n  useEffect(() => {\n    //onSnapshot is like snapshot anytime when there is some change in db it will pull all out in variable snapshot below\n\n    //snapshot.map get all docs loop through them and give each document data and it would be object\n\n    //orderby timestamp recent things will come at top\n    \n    db.collection('messages')\n    .orderBy('timestamp','desc')\n    .onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => ({id: doc.id , message: doc.data()})))\n    });\n  },[])\n\n\n  useEffect(() => {\n    setUsername(prompt('Please enter name: '))\n  },[])\n  \n  const sendMessage = (event) => {\n    event.preventDefault(); //will not refresh\n    db.collection('messages').add({\n      message: input,\n      username : username,\n      timestamp : firebase.firestore.FieldValue.serverTimestamp()\n      //serverTimezone which location we selected to host our database\n    })\n    setInput(\"\");\n  };\n\n\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2019/10/Messenger_Logo_Color_RGB.png?w=100&h=100\" />\n      <h1>Messenger Clone <span role=\"img\" aria-label={'rocket'}>ðŸš€</span></h1>\n      {/* if enter is not working wrap inside form tag and add type=\"submit\" in button but it refreshes screen so add prevent Defualt*/}\n\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n            \n            <Input\n              className=\"app__input\"\n              placeholder=\"Enter a message...\"\n              value={input}\n              onChange={(event) => setInput(event.target.value)}\n            />\n\n\n            <IconButton className=\"app__iconButton\" disabled={!input}\n              onClick={sendMessage} type=\"submit\" color=\"primary\" variant=\"contained\">\n                <SendIcon />\n              </IconButton>\n\n            {/* <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.button}\n              endIcon={<SendIcon></SendIcon>}\n              type=\"submit\"\n              disabled={!input}\n              onClick={sendMessage}\n            >\n            </Button> */}\n\n        </FormControl>\n      </form>\n\n      <FlipMove>\n      {messages.map(({id,message}) => (\n        <Message key={id} username={username} message={message} />\n      ))}\n      </FlipMove>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}